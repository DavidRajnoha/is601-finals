version: '3.8'

services:
  postgres:
    image: postgres:16.2
    environment:
      POSTGRES_DB: myappdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d myappdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: adminpassword
      PGADMIN_LISTEN_PORT: 80
    depends_on:
      - postgres
    ports:
      - "5050:80" # Expose PgAdmin on port 5050 of the host
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - app-network

  fastapi:
    build: .
    volumes:
      - ./:/myapp/
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - fastapi
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:management
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    networks:
      - app-network
    ports:
      - "15672:15672"

  worker:
    build: .
    container_name: celery_worker
    # re-use the same image/Dockerfile as “web”,
    # so you get your app code & dependencies
    command: >
      celery -A app.celery.celery_app.celery
             worker
             --loglevel=INFO
             --concurrency=${CELERY_CONCURRENCY:-2}
             --hostname=worker@%h
    volumes:
      - ./:/app
    env_file:
      - .env
    networks:
      - app-network
    depends_on:
      - rabbitmq
      - redis

  redis:
    image: redis:6-alpine
    container_name: redis
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres-data:
  pgadmin-data:

networks:
  app-network:
